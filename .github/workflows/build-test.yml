name: Build and perform build time tests

on:
  pull_request:        # always build for PRs but don’t publish
  workflow_dispatch:   # allow manual runs

env:
  DEV_IMAGE_TAG_PREFIX: chimera-dev

jobs:
  build:
    name: Build ${{ matrix.platform }} ${{ matrix.build_type }}
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-24.04
            build_type: Release
            tag: latest-amd64
          - platform: linux/amd64
            runner: ubuntu-24.04
            build_type: Debug
            tag: latest-debug-amd64
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
            build_type: Release
            tag: latest-arm64
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
            build_type: Debug
            tag: latest-debug-arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build the dev container image
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .devcontainer/Dockerfile
          platforms: ${{ matrix.platform }}
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ env.DEV_IMAGE_TAG_PREFIX }}:${{ github.sha }}-${{ matrix.tag }}
          build-args: |
            BUILD_TYPE=${{ matrix.build_type }}

      - name: Configure, build, and test inside the dev container
        run: |
          docker run --rm --privileged \
            -v "${{ github.workspace }}:/workspace" \
            -v /build \
            -w /build \
            ${{ env.DEV_IMAGE_TAG_PREFIX }}:${{ github.sha }}-${{ matrix.tag }} \
            bash -euxc '\
              cmake -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} /workspace && \
              ninja && \
              ctest -j 4 --output-on-failure'

      - name: Perform clang static analysis
        run: |
          docker run --rm --privileged \
            -v "${{ github.workspace }}:/workspace" \
            -v /build \
            -w /build \
            ${{ env.DEV_IMAGE_TAG_PREFIX }}:${{ github.sha }}-${{ matrix.tag }} \
            bash -euxc '\
              scan-build --status-bugs --exclude /workspace/ext/libsmb2 -o /build/ScanReport \
              sh -c "cmake -D CMAKE_BUILD_TYPE=Debug -B /build -S /workspace -G Ninja && ninja -C /build"'